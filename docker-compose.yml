version: '3.8'

services:
  signglove-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: signglove-server
    restart: unless-stopped
    ports:
      - "8000:8000"    # FastAPI 서버
      - "9090:9090"    # 메트릭스 포트 (선택사항)
    volumes:
      - ./data:/opt/signglove/data                    # 데이터 디렉토리
      - ./backup:/opt/signglove/backup                # 백업 디렉토리
      - ./logs:/var/log/signglove                     # 로그 디렉토리
      - ./config/ubuntu.env:/opt/signglove/config/.env:ro  # 환경설정 (읽기 전용)
    environment:
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - PYTHONPATH=/opt/signglove
    networks:
      - signglove-network
    healthcheck:
      test: ["CMD", "python", "/usr/local/bin/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.signglove.rule=Host(`signglove.yourdomain.com`)"
      - "traefik.http.routers.signglove.tls=true"
      - "traefik.http.services.signglove.loadbalancer.server.port=8000"

  # Redis (캐싱 및 세션 저장용 - 선택사항)
  redis:
    image: redis:7-alpine
    container_name: signglove-redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # 로컬에서만 접근 가능
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - signglove-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx (리버스 프록시 - 선택사항)
  nginx:
    image: nginx:alpine
    container_name: signglove-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - signglove-app
    networks:
      - signglove-network

  # PostgreSQL (프로덕션 데이터베이스 - 향후 SQLite 대체용)
  postgres:
    image: postgres:15-alpine
    container_name: signglove-postgres
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"  # 로컬에서만 접근
    environment:
      - POSTGRES_DB=signglove
      - POSTGRES_USER=signglove
      - POSTGRES_PASSWORD=your_secure_password_here
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - signglove-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U signglove"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus (모니터링 - 선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: signglove-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9000:9090"  # 로컬에서만 접근
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - signglove-network

  # Grafana (대시보드 - 선택사항)
  grafana:
    image: grafana/grafana:latest
    container_name: signglove-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"  # 로컬에서만 접근
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=your_grafana_password_here
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - signglove-network

networks:
  signglove-network:
    driver: bridge
    name: signglove-net

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local 